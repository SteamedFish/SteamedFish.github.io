<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on SteamedFish&#39;s BLOG</title>
		<link>https://blog.steamedfish.org/posts/</link>
		<description>Recent content in Posts on SteamedFish&#39;s BLOG</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-cn</language>
		<lastBuildDate>Tue, 04 Jun 2019 17:00:08 +0800</lastBuildDate>
		<atom:link href="https://blog.steamedfish.org/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>systemd-journal 占用内存的问题</title>
			<link>https://blog.steamedfish.org/posts/systemd-journald/</link>
			<pubDate>Tue, 04 Jun 2019 17:00:08 +0800</pubDate>
			
			<guid>https://blog.steamedfish.org/posts/systemd-journald/</guid>
			<description>systemd-journal 占用内存的问题 最近发现部分 Debian 机器的 systemd-journal 占用了非常多内存。这和 Debian 对其的 错误配置有关系（查了一下其他发行版，有和 Debian 一样的配置的也有和 Debian 不一样 的配</description>
			<content type="html"><![CDATA[

<h1 id="systemd-journal-占用内存的问题">systemd-journal 占用内存的问题</h1>

<p>最近发现部分 Debian 机器的 systemd-journal 占用了非常多内存。这和 Debian 对其的
错误配置有关系（查了一下其他发行版，有和 Debian 一样的配置的也有和 Debian 不一样
的配置的，说明这个配置有争议）。</p>

<h2 id="systemd-journal-简介">systemd-journal 简介</h2>

<p>systemd-journal 是 systemd 引入的系统日志记录工具。其优势是：</p>

<ul>
<li>使用二进制保存日志，有压缩，体积小</li>
<li>可以记录启动早期，磁盘还没挂载之前，rsyslog 还没启动时候的系统日志</li>
<li>有索引，可以快速搜索</li>
<li>索引包含了多种类型，可以方便使用多种维度，以及他们的组合，进行搜索，包含但不限
于：

<ul>
<li>时间</li>
<li>PID</li>
<li>程序可执行文件路径</li>
<li>service 名称</li>
<li>用户</li>
<li>内核</li>
<li>错误级别</li>
</ul></li>
<li>显示的时候，可以针对不同等级做高亮，可以转换日志时间戳</li>
<li>可以针对日志设置用户访问权限控制</li>
<li>会对日志做校验，用户无法修改任何日志，日志也不能伪造用户、processid 等敏感信息</li>
<li>可以设置 rotate 和最大体积等各种限制，也可以比较方便地手工清理指定时间之前的日
志</li>
<li>支持 syslog 的所有日志级别</li>
<li>支持复制日志并转发到 rsyslog</li>
</ul>

<p>由于可以方便地过滤某个时间段的所有程序的日志，所以 journal 特别适合 debug 一些多
种环境下，会有多个日志源的复杂问题，可以按时间顺序将所有日志源共同打印出来，从而
清晰地观察到各种应用程序之间的交互顺序。</p>

<p>其缺点是：</p>

<ul>
<li>不支持 rsyslog 的复制日志和转发过滤等功能</li>
</ul>

<p>由于游戏需要 rsyslog 的转发过滤，因此我们一般都会打开 rsyslog，因此在 Debian 中，
日志会首先到达 systemd-journal，并且被保存为 journal 文件，同时再转一个副本给
rsyslog，由 rsyslog 控制写到 <code>/var/log/</code> 目录下，或者游戏项目自行设置的其他路径
下。</p>

<h2 id="systemd-journal-的配置">systemd-journal 的配置</h2>

<p>在 <code>/etc/systemd/journald.conf</code> 下面。支持的配置项还是比较多的。具体可以参考
<code>man 5 journald.conf</code></p>

<h2 id="systemd-journal-的使用">systemd-journal 的使用</h2>

<p>使用 <code>journalctl</code> 命令。具体参数可以 <code>man 1 journalctl</code> 查看。</p>

<h2 id="systemd-journal-的坑">systemd-journal 的坑</h2>

<p>默认的配置文件，配置了 <code>Storage=auto</code>。含义为：</p>

<ul>
<li>如果设置为 volatile，journal 将会保存在内存中，使用位于内存盘的
<code>/run/log/journal</code> 目录（会自动创建）</li>
<li>如果设置为 persistent，journal 将会保存在磁盘中，使用 <code>/var/log/journal</code> 目录
（会自动创建），如果自动创建失败，以及针对启动早期磁盘尚未挂载成功的部分日志，
仍然记录在内存盘。</li>
<li>如果设置为 auto，那么，如果 <code>/var/log/journal</code> 目录存在，则使用该目录记录到磁
盘，如果目录不存在（不会自动创建），则使用内存盘。</li>
<li>如果设置为 none，完全不记录任何日志（但是仍然可以转发给 rsyslog）</li>
<li>默认是 auto</li>
</ul>

<p>而 Debian 默认并不会创建 <code>/var/log/journal</code> 目录（查了一下其他发行版，有创建的有
不创建的，看来不同发行版是有分歧的）。因此会导致默认配置情况下，journal 默认会将
日志全部保存在内存盘中。</p>

<p>在我们长期不关机的情况下，<code>/run/log/journal</code> 目录可能会变得非常大，从而导致占据
较多内存。</p>

<p>systemd 默认的配置，对总的存储空间做了上限。上限如下：</p>

<ul>
<li>如果使用的是磁盘，那么上限默认为磁盘空间的 10% 和 4G 中较小的那个（由
<code>SystemMaxUse</code> 控制）</li>
<li>如果使用的是内存，那么上限默认为内存空间的 15% 和 4G 中较小的那个（由
<code>RuntimeMaxUse</code> 控制）</li>
</ul>

<p>因此，极端情况下，journal 可能会消耗 4G 的内存。</p>

<h2 id="清理-journal-的内存">清理 journal 的内存</h2>

<ul>
<li>清除到只剩下最新的 100M 空间：<code>journalctl --vacuum-size=100M</code></li>
<li>清除到只剩下最近两小时：<code>journalctl --vacuum-time=2h</code></li>
<li>将内存盘中的数据刷到硬盘：<code>journalctl --flush</code></li>
<li>或者采用很黄很暴力的清除方法（不推荐）：<code>rm -rf /run/log/journal &amp;&amp; systemctl
restart systemd-journal</code></li>
</ul>

<h2 id="建议的解决办法">建议的解决办法：</h2>

<p>以下方法任选一种即可</p>

<ul>
<li>方法一：创建 <code>/var/log/journal</code> 目录，然后使用 <code>journalctl --flush</code> 将内存盘中
的数据刷到硬盘</li>
<li>方法二：修改 <code>/etc/systemd/journald.conf</code>，配置 <code>Storage=persistent</code>，然后重启
<code>systemd-journal</code> 并使用 <code>journalctl --flush</code> 将内存盘中的数据刷到硬盘</li>
<li>方法三：修改 <code>/etc/systemd/journald.conf</code>，配置 <code>Storage=none</code>，然后重启
<code>systemd-journal</code></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Emacs 在 .dir-locals.el 中执行 elisp 语句</title>
			<link>https://blog.steamedfish.org/posts/run-elisp-in-dir-locals-el-file/</link>
			<pubDate>Fri, 03 May 2019 22:53:09 +0800</pubDate>
			
			<guid>https://blog.steamedfish.org/posts/run-elisp-in-dir-locals-el-file/</guid>
			<description>在 .dir-locals.el 中可以控制目录级别的变量。这个文件不是一个 elisp 代码文件， 而是只能存放一个 Association List （联合列表，alist）的列表。 这个联合列表里面的每个 cons cell 的 car</description>
			<content type="html"><![CDATA[<p>在 <code>.dir-locals.el</code> 中可以控制目录级别的变量。这个文件不是一个 elisp 代码文件，
而是只能存放一个 Association List （联合列表，alist）的列表。</p>

<p>这个联合列表里面的每个 cons cell 的 car 是希望生效的模式，cdr 则又是一个 alist，
用于给变量赋值。</p>
<div class="highlight"><pre class="chroma"><code class="language-elisp" data-lang="elisp"><span class="p">(</span> <span class="c1">;; 一个大列表，里面是很多 alist</span>
 <span class="p">(</span><span class="nv">c-mode</span> <span class="o">.</span> <span class="p">(</span>  <span class="c1">;; 这个 alist 控制 c-mode 模式下的行为，其中 cdr 又是一个 alist</span>
            <span class="p">(</span><span class="nv">c-file-style</span> <span class="o">.</span> <span class="s">&#34;BSD&#34;</span><span class="p">)</span>
            <span class="p">(</span><span class="nv">subdirs</span> <span class="o">.</span> <span class="no">nil</span><span class="p">)</span>
           <span class="p">)</span>
 <span class="p">)</span>
 <span class="p">(</span><span class="no">nil</span> <span class="o">.</span> <span class="p">(</span>     <span class="c1">;; 这个 alist 对所有 mode 生效</span>
         <span class="p">(</span><span class="nv">indent-tabs-mode</span> <span class="o">.</span> <span class="no">t</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">tab-witdh</span> <span class="o">.</span> <span class="mi">4</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">fill-column</span> <span class="o">.</span> <span class="mi">80</span><span class="p">)</span>
        <span class="p">)</span>
 <span class="p">)</span>
<span class="p">)</span></code></pre></div>
<p>那么问题来了，有时候我们希望能够不仅仅是赋值，而是执行 elisp 语句。这个时候我们
不需要赋值，需要的是语句的副作用。我们可以将其赋值给随便一个不需要的变量上，例如
叫 <code>eval</code> 。然后我们就可以这样写：</p>
<div class="highlight"><pre class="chroma"><code class="language-elisp" data-lang="elisp"><span class="p">((</span><span class="nv">c-mode</span> <span class="o">.</span> <span class="p">((</span><span class="nv">c-file-style</span> <span class="o">.</span> <span class="s">&#34;BSD&#34;</span><span class="p">)</span>
            <span class="p">(</span><span class="nv">subdirs</span> <span class="o">.</span> <span class="no">nil</span><span class="p">)))</span>
 <span class="p">(</span><span class="no">nil</span> <span class="o">.</span> <span class="p">((</span><span class="nv">indent-tabs-mode</span> <span class="o">.</span> <span class="no">t</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">tab-witdh</span> <span class="o">.</span> <span class="mi">4</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">fill-column</span> <span class="o">.</span> <span class="mi">80</span><span class="p">)</span>
         <span class="p">(</span><span class="nf">eval</span> <span class="o">.</span> <span class="p">(</span><span class="nb">progn</span>
                   <span class="p">(</span><span class="nv">flycheck-mode</span> <span class="mi">1</span><span class="p">)</span>
                   <span class="p">(</span><span class="nv">xxxxxx</span><span class="p">)</span>
                   <span class="p">(</span><span class="nv">xxxxx</span><span class="p">))))))</span></code></pre></div>
<p>不过这样会导致 Emacs 在加载这个文件的时候，提示你加载了一个不安全的文件，并且让
你选择究竟是不加载，还是只允许一次，还是永久加载。如果选择永久加载，emacs 会记录
在 <code>custom.el</code> 中。</p>
]]></content>
		</item>
		
	</channel>
</rss>
