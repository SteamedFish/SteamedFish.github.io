<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on SteamedFish&#39;s BLOG</title>
		<link>https://blog.steamedfish.org/posts/</link>
		<description>Recent content in Posts on SteamedFish&#39;s BLOG</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-cn</language>
		<lastBuildDate>Tue, 04 Jun 2019 00:53:47 +0800</lastBuildDate>
		<atom:link href="https://blog.steamedfish.org/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Doom Emacs 简介</title>
			<link>https://blog.steamedfish.org/posts/doom-emacs-introduction/</link>
			<pubDate>Tue, 04 Jun 2019 00:53:47 +0800</pubDate>
			
			<guid>https://blog.steamedfish.org/posts/doom-emacs-introduction/</guid>
			<description>Doom Emacs 简介 前言 文本编辑器是我们日常工作中打交道最多的几个工具之一了（终端模拟器、浏览器，是另外两个工作中需要大量使用的工具）。笔者自己的经验是</description>
			<content type="html"><![CDATA[

<h2 id="doom-emacs-简介">Doom Emacs 简介</h2>

<h2 id="前言">前言</h2>

<p>文本编辑器是我们日常工作中打交道最多的几个工具之一了（终端模拟器、浏览器，是另外两个工作中需要大量使用的工具）。笔者自己的经验是，每天工作的 30% - 50% 的时间会在文本编辑器下面工作。因此，深入学习文本编辑器的功能，提高使用文本编辑器的效率，磨刀不误砍柴功，对工作效率的提升是很有帮助的。</p>

<p>提起文本编辑器，最出名的就是 Emacs 和 VIM 了。Emacs 和 VIM 都因为其超强的扩展性和可配置性，从而功能异常强大。尤其是 Emacs，拥有及其强大的特性集和极为灵活的扩展和配置，可以实现非常多不可思议的功能，是目前功能最强大的文本编辑器。VIM （以及 neovim）最近几年也在快速发展中，之前很多 VIM 没有的特性现在也慢慢开始增加进来，不过目前暂时还没有达到 Emacs 的水平。</p>

<p>但是，不论是 Emacs 还是 VIM，都有学习成本过高的缺点，Emacs 更是以学习成本最高的文本编辑器而著称。所以，社区现在涌现了众多的 Emacs 和 VIM 的“发行版”。这些“发行版”会帮你安装和配置好大量的插件，有的“发行版”还提供了再它们的基础上进一步做自定义的手段和工具。这些“发行版”大大降低了 Emacs 和 VIM 的学习成本，让 Emacs 和  VIM 变得开箱即用。我们推荐选择一个“发行版”，在此基础上来学习 Emacs 或 VIM，而不推荐从零开始学习。</p>

<p>这种“发行版”特别多，各有优劣。如果论名气和人气的话，根据笔者有限的涉猎，应该是 Spacemacs 这个 Emacs “发行版”和 SpaceVIM 这个 VIM “发行版”名气最大，人气最旺。但是笔者使用最多，也是最喜欢的，是一个叫做 Doom Emacs 的 Emacs “发行版”。由于笔者对其他可能更热门的“发行版”并不熟悉，所以只能介绍这个稍显冷门的发行版了，供大家在学习 Emacs 的过程中做参考。</p>

<h2 id="doom-emacs-简介-1">Doom Emacs 简介</h2>

<p>Doom Emacs 这个 Emacs “发行版”，具有以下特点：</p>

<ul>
<li>极端重视速度。使用了大量的手段来确保启动和运行速度尽可能快，使用尽可能流畅</li>
<li>不使用任何图形化界面或者需要动用鼠标的工具，而是完全使用命令行进行管理</li>
<li>为已经习惯了 VIM 的操作方式，但是希望使用 Emacs 的强大功能的人所设计</li>
<li>假定用户是愿意投入时间和精力学习、了解 Emacs 和修改配置的极客，尽可能避免使用复杂的封装隐藏掉 Emacs 内部的机制，并且提供了方便的修改机制，可以自由地进行各种调整</li>
</ul>

<p>如果这些特点和你不匹配（例如你不会，或者不喜欢 VIM 的操作方式），那么你不适合使用 Doom Emacs，你应该使用其他的“发行版”，例如 Centaur Emacs 或者 Spacemacs 等。</p>

<h2 id="doom-emacs-的安装">Doom Emacs 的安装</h2>

<h3 id="emacs-的安装">Emacs 的安装</h3>

<p>由于 Doom Emacs 只是 Emacs 的一个配置文件，因此第一步应该安装 Emacs。我们推荐安装最新的稳定版本 Emacs 26，或者使用开发版本 Emacs 27，因为 Doom Emacs 的有些特性（例如 childframe 等）只有 Emacs 26 或者以上的版本才能支持。</p>

<p>以笔者比较熟悉的几个发行版为例，安装方法为：</p>

<ul>
<li><p>macOS 安装 Emacs（假定你使用的是 homebrew 作为包管理器）</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">brew tap railwaycat/emacsmacport
brew install emacs-mac --with-modules
ln -s /usr/local/opt/emacs-mac/Emacs.app /Applications/</code></pre></div>
<ul>
<li>ArchLinux 安装 Emacs</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">pacman -S emacs</code></pre></div></li>

<li><p>Debian 安装 Emacs</p>

<p>由于 Debian 源中的 Emacs 版本过老，推荐使用 LinuxBrew 或者 nix 来安装最新的 Emacs 版本。</p></li>
</ul>

<h3 id="doom-emacs-的安装-1">Doom Emacs 的安装</h3>

<p>Emacs 的配置文件目录在 <code>~/.emacs.d/</code> 下面。因此需要将 Doom Emacs 放在这个目录。</p>

<p>由于 Doom Emacs 使用了 <code>~/.emacs.d/</code>，修改里面的文件内容会破坏 git 状态，导致后续无法通过 <code>git pull</code> 等方式来更新 Doom Emacs，因此 Doom Emacs 会读取 <code>~/.doom.d/</code> 目录下面的内容，并且推荐用户使用 <code>~/.doom.d/</code> 目录来放置进一步的自定义配置。</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># 如果之前已经有配置文件，做个备份</span>
<span class="o">[</span> -d ~/.emacs.d <span class="o">]</span> <span class="o">&amp;&amp;</span> mv ~/.emacs.d ~/.emacs.d.bak
<span class="c1"># 下载 Doom Emacs 到 ~/.emacs.d 目录，推荐使用 develop 分支</span>
git clone -b develop https://github.com/hlissner/doom-emacs.git ~/.emacs.d
<span class="c1"># 创建默认配置文件并初始化 Doom</span>
~/.emacs.d/bin/doom quickstart</code></pre></div>
<p>在执行 quickstart 的过程中，会自动下载一些 Emacs 插件。由于插件下载地址在国外，可能会出现下载速度过慢甚至下载失败的问题。如果遇到了这个问题，可以修改 <code>~/.doom.d/init.el</code> 文件（执行 quickstart 时会自动生成这个文件的），在最上面的注释后面（也就是 <code>(doom!</code> 这一行的前面）增加以下内容，然后再重新执行一下 quickstart：</p>
<div class="highlight"><pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">setq</span> <span class="nv">package-archives</span> <span class="o">&#39;</span><span class="p">((</span><span class="s">&#34;gnu-cn&#34;</span>   <span class="o">.</span> <span class="s">&#34;http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/&#34;</span><span class="p">)</span>
                         <span class="p">(</span><span class="s">&#34;melpa-cn&#34;</span> <span class="o">.</span> <span class="s">&#34;http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/&#34;</span><span class="p">)</span>
                         <span class="p">(</span><span class="s">&#34;org-cn&#34;</span>   <span class="o">.</span> <span class="s">&#34;http://mirrors.tuna.tsinghua.edu.cn/elpa/org/&#34;</span><span class="p">)))</span></code></pre></div>
<p>在执行 quickstart 的过程中，还会自动下载并安装一些字体。如果你发现这些字体的下载安装也太慢，你可以去 <a href="https://github.com/domtronn/all-the-icons.el">https://github.com/domtronn/all-the-icons.el</a> 项目下，自己下载 <code>fonts</code> 目录下面的所有字体并且安装到你系统上。</p>

<p>安装完成之后，就可以打开 Emacs 啦。Doom Emacs 支持命令行版本和图形界面版本的 Emacs，如果使用图形界面的版本会有更多功能。</p>

<h2 id="doom-emacs-的基本概念">Doom Emacs 的基本概念</h2>

<h3 id="按键和按键序列">按键和按键序列</h3>

<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>

<tbody>
<tr>
<td><kbd>C</kbd></td>
<td><kbd>Ctrl</kbd></td>
</tr>

<tr>
<td><kbd>M</kbd></td>
<td>不同操作系统名称不同，可能显示为 <kbd>Meta</kbd> 、 <kbd>Alt</kbd> 或者 <kbd>Option</kbd></td>
</tr>

<tr>
<td><kbd>SPC</kbd></td>
<td>空格</td>
</tr>

<tr>
<td><kbd>S</kbd></td>
<td><kbd>Shift</kbd></td>
</tr>

<tr>
<td><kbd>H</kbd></td>
<td>不同操作系统名称不同，可能显示为 <kbd>Hyper</kbd>、<kbd>Command</kbd>、<kbd>Windows</kbd> 或者 <kbd>Super</kbd></td>
</tr>
</tbody>
</table>

<p>例如，<kbd>M-x</kbd>，表示按住 <kbd>Alt</kbd> 键不放，同时按下 <kbd>x</kbd> 键。</p>

<p>Doom Emacs 使用按键序列来表示某个功能。例如使用按键序列 <kbd>SPC f .</kbd>（表示先按下 <kbd>SPC</kbd>，也就是空格，放手，再按下 <kbd>f</kbd>，放手，再按下 <kbd>.</kbd>）来搜索当前目录下的文件。</p>

<p>其中，<kbd>SPC</kbd> 叫做前缀按键。当按下前缀按键，整个按键序列还没结束的时候，Doom Emacs 会在最下方（叫做 mini buffer）显示所有可用的按键的菜单，作为提示。例如，当按下了 <kbd>SPC f</kbd> 的时候，mini buffer 中会提示，继续按 <kbd>.</kbd> 则可以搜索当前目录下的文件：</p>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190515111321.png" alt="请在这里输入图片描述" /></p>

<p>如果可用的按键特别多，mini buffer 空间不够显示不全，则会显示页数（例如 <code>1 of 4</code> 表示一共 4 页）。可以按 <kbd>C-h</kbd> 来翻页。</p>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190515125448.png" alt="请在这里输入图片描述" /></p>

<p>关于按键序列，以下需要记住的是：</p>

<ul>
<li><kbd>C-g</kbd> 可以退出没结束的按键序列。例如你当前已经按下了 <kbd>SPC f</kbd> 但是后悔了，可以按 <kbd>C-g</kbd> 来取消。<kbd>C-g</kbd> 除了取消按键序列之外，还可以用来取消任何 Emacs 当前正在执行的操作。如果你的 Emacs 在做一些非常耗时的事情，导致卡住了，你又不想等待，可以狂按 <kbd>C-g</kbd>，一般就好了。</li>
<li><kbd>SPC</kbd> 这是 Doom Emacs 最重要也是最核心的前缀按键，绝大多数功能都通过这个前缀按键触发。建议大家完整翻阅一遍 <kbd>SPC</kbd> 这个前缀按键下面的所有功能。</li>
<li><kbd>g</kbd> 这是 NORMAL 模式或者 VISUAL 模式下最重要的编辑前缀按键。例如 VISUAL 模式下 <kbd>gc</kbd> 为注释（或者解除注释）当前选中的部分，NORMAL 模式下 <kbd>gD</kbd> 为查找光标所在变量的所有引用等。建议大家分别在 NORMAL 模式和 VISUAL 模式下完整翻阅一遍这个前缀按键下面的所有功能。</li>
<li><kbd>C-x</kbd> 为 Emacs 的主菜单，提供的是 Emacs 通用的功能，例如 <kbd>C-x C-c</kbd> 为保存并退出 Emacs，<kbd>C-x C-u</kbd> 将当前选择的区域变成大写等。这个菜单里面的功能不会随着当前模式的改变而改变。</li>
<li><kbd>C-c</kbd> 为当前模式的菜单，提供的是当前模式特有的功能，例如如果你在编辑 python 文件，那么 <kbd>C-c &lt;</kbd> 可以调整 python 代码块的缩进。这个菜单里面的功能会随着当前模式的改变而改变。</li>
<li><kbd>C-h</kbd> 获取帮助。这个按键的作用和 <kbd>SPC h</kbd> 是一样的，但是在 INSERT 模式下面也能用。例如，如果你想知道在 INSERT 模式下面，<kbd>TAB</kbd> 这个按键到底是做什么用的，你是不能使用 <kbd>SPC h k TAB</kbd> 的，因为这样是插入了这些字符，但是你可以使用 <kbd>C-h k TAB</kbd>。</li>
<li><kbd>z</kbd> 代码折叠、宏等一些小功能。</li>
</ul>

<p>如果实在记不住按键序列的话，还可以使用 Emacs 的菜单栏（Mac 系统默认带菜单栏，Linux 下面需要使用命令 <kbd>M-x menu-bar-mode</kbd> 打开菜单栏），直接使用鼠标点击菜单来执行各种命令。</p>

<p>如果记不住按键序列，又不想用鼠标，还有个办法，就是使用 <kbd>M-x</kbd>。这个按键下面可以模糊搜索所有 Emacs 支持的命令（模糊搜索功能默认不打开，需要配置为打开， 后面会讲怎么配置模糊搜索）。例如你要查找文件，忘记了应该用哪个按键序列，你可以直接 <kbd>M-x findfile</kbd>，然后找到你想要的命令（使用 <kbd>C-n</kbd> 和 <kbd>C-p</kbd> 翻页），按回车执行就好。</p>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190515113806.png" alt="请在这里输入图片描述" /></p>

<h3 id="buffer">buffer</h3>

<p>每打开一个文件，Emacs 就生成一个 buffer。</p>

<p>可以使用 <kbd>SPC b</kbd> 或者菜单里面的 Buffers 对 buffer 进行操作。也可以使用 <kbd>SPC &lt;</kbd> 打开 buffer 列表来切换 buffer。</p>

<h4 id="frame">frame</h4>

<p>每个物理的窗口，是一个 frame。Emacs 可以生成多个 frame。</p>

<p>由于 frame 操作不常用，Doom Emacs 没有配置使用 <kbd>SPC</kbd> 来控制 frame 的方式 ，需要使用一个比较难记的按键前缀 <kbd>C-x 5</kbd> 来控制 frame。如果你确实有经常使用 frame 的需求，可以自定义 frame 的快捷键。</p>

<p>下图中，给 Emacs 开了五个 frame：</p>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190515122215.png" alt="请在这里输入图片描述" /></p>

<h4 id="window">window</h4>

<p>每个 frame 都可以分割成多个 window。</p>

<p>可以使用 <kbd>SPC w</kbd> 或者 <kbd>C-w</kbd> 对 window 进行操作。这两个按键的效果是一样的，只是 <kbd>C-w</kbd> 在 INSERT 模式下面也可以使用。</p>

<p>下图中，开了四个 window，分别显示文件树、文件内容、变量列表和 Terminal。</p>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190515124337.png" alt="请在这里输入图片描述" /></p>

<h4 id="major-mode">major mode</h4>

<p>每个 buffer 都对应一个主模式。例如打开一个 <code>.py</code> 扩展名的文件，emacs 会自动设置此 buffer 为 python 主模式。</p>

<p>每个主模式下面，按键都有不同的含义。可以使用 <kbd>C-c</kbd> 或者 <kbd>SPC m</kbd> 查看主模式下面提供的各种命令。</p>

<p>每个 buffer 只能对应一个主模式。在 window 的下方的一个横条（叫做 mode line）上，会显示当前 window 的 buffer，major mode 等一些信息。</p>

<h4 id="minor-mode">minor mode</h4>

<p>每个 buffer，都可以打开很多个小模式。小模式可以在主模式的基础上提供更多的功能。</p>

<p>例如，可以使用 <kbd>SPC t l</kbd> 控制关于行号显示的小模式，来开关行号显示。</p>

<p>可以使用 <kbd>SPC h m</kbd> 来查看当前打开的所有小模式。</p>

<h4 id="project">project</h4>

<p>emacs 会自动把一些特定的目录（例如一个 git 仓库，一个含有 <code>bundler</code> 文件的 ruby 仓库等）自动识别为一个 project。</p>

<p>你也可以在一个目录下面创建一个空的文件 <code>.projectile</code> 来让 emacs 识别这个目录为一个 project。</p>

<p>有 project 的好处是你可以将一些命令控制在当前 project 当中，例如 <kbd>SPC / p</kbd> 可以在当前 project 下面进行内容搜索，<kbd>SPC p /</kbd> 可以 在当前 project 下面进行文件搜索。</p>

<p>你可以使用 <kbd>SPC p p</kbd>，从各种不同的 project 之间相互切换。emacs 会给每个 project 单独开一个 workspace。</p>

<h4 id="workspace">workspace</h4>

<p>如果你需要在众多项目之间切换，你可以使用多个 workspace。每个 workspace 都可以有自己的一组 window。例如 workspace 1 可以是两个垂直分割的 window，workspace 2 则是一个大 window。可以使用 <kbd>SPC TAB</kbd> 管理和切换 workspace。</p>

<p>你可以将这个 workspace 保存成文件（<kbd>SPC TAB s</kbd>），将来可以重新加载（<kbd>SPC TAB l</kbd>）。</p>

<h4 id="session">session</h4>

<p>在 Doom  Emacs 退出的时候，会自动保存当前的 session 状态，包括 workspace 信息，所有的 buffer 信息和光标位置，下次打开时，可以使用 <kbd>SPC q l</kbd> 恢复之前的状态。</p>

<h4 id="server-和-client">server 和 client</h4>

<p>Doom Emacs 会自动开启 Emacs server。</p>

<p>在命令行下，你可以使用 <code>emacsclient -n filename</code> 来调用 Emacs 打开文件。</p>

<p>通过这种方式，你可以在命令行下面快速调用 Emacs 打开文件，甚至可以将你的 <code>$EDITOR</code> 环境变量设置成 <code>emacsclient -n</code> 来使得 crontab 等各种编辑都自动打开 emacs。</p>

<h2 id="doom-emacs-的基本使用">Doom Emacs 的基本使用</h2>

<h3 id="doom-emacs-的管理命令">Doom Emacs 的管理命令</h3>

<p>Doom Emacs 的管理必须使用命令行进行。</p>

<p><code>~/.emacs.d/bin/doom help</code>  获取所有可用的命令。常用的命令包括 <code>doom upgrade</code> 升级 Doom Emacs，<code>doom update</code> 升级所有插件，<code>doom doctor</code> 检查系统有没有问题。建议经常执行  <code>doom doctor</code> 检查系统。</p>

<h3 id="doom-emacs-的基本操作">Doom Emacs 的基本操作</h3>

<h4 id="执行命令">执行命令</h4>

<ul>
<li>大部分命令都可以按空格 <kbd>SPC</kbd> 获取</li>
<li>也可以使用 <kbd>M-x</kbd> 再输入命令名称的方式来执行命令</li>
<li>还可以打开菜单栏（<kbd>M-x menu-bar-mode</kbd>），点击菜单来执行命令</li>
</ul>

<h4 id="获取帮助">获取帮助</h4>

<ul>
<li>可以使用 <kbd>SPC h k &lt;按键&gt;</kbd> 来查看某个按键的具体含义</li>
<li>可以使用 <kbd>SPC  h f &lt;命令&gt;</kbd> 来查看某个命令的具体含义</li>
<li>可以使用 <kbd>SPC h I</kbd> 来查看 Emacs 的所有文档</li>
<li><kbd>SPC h</kbd> 按键序列下还有其他大量的帮助命令</li>
</ul>

<h4 id="编程">编程</h4>

<p>不同编程语言提供的功能不一定相同。这里以 python 为例：</p>

<ul>
<li><kbd>SPC c</kbd> 有编程相关的控制，例如 <kbd>SPC c e</kbd> 可以执行当前文件</li>
<li><kbd>SPC m</kbd> 有编程相关的编辑功能，例如 <kbd>SPC m I m</kbd> 可以自动将当前光标所在处的函数所需要的 <code>import</code> 补充好。</li>
<li><kbd>g</kbd> 提供了跳转功能，例如 <kbd>gd</kbd> 跳转到当前光标所在函数或者变量的所有引用，<kbd>gf</kbd> 跳转到当前光标所在位置对应的文件等。</li>
<li>可以使用 <kbd>SPC /</kbd> 进行查找和搜索，例如 <kbd>SPC / i</kbd> 进行函数跳转，<kbd>SPC / b</kbd> 在当前 buffer 进行搜索等。</li>
<li>使用 <kbd>z</kbd>来做代码折叠。</li>
</ul>

<h2 id="doom-emacs-的模块">Doom Emacs 的模块</h2>

<h3 id="模块简介">模块简介</h3>

<p>Doom Emacs 是模块化的，配置被分成了众多的模块。</p>

<p>例如，如果你需要经常编辑 python 文件，你可以开启 python 模块，这样 Doom Emacs 会自动帮你安装 python 相关的一些插件并且做相关配置。如果你不需要编辑 python，你可以不开启 python 模块，这样就不会安装这些插件了，可以节省空间，加快速度。</p>

<p>模块本身还可以有选项。例如，python 模块有个选项，<code>+ipython</code>，如果打开了 python 模块，并且打开了这个选项，那么除了安装 python 相关的插件之外，还会安装 ipython 相关的插件。</p>

<p>开启哪些模块，每个模块使用哪些选项，在配置文件 <code>~/.doom.d/init.el</code> 中定义。你可以在 Doom Emacs 中使用快捷键 <kbd>SPC f P</kbd> 来快速打开这个配置文件。</p>

<p>当修改了模块配置之后，可能会导致需要安装新的插件。你需要执行以下命令来刷新插件：</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">~/.emacs.d/bin/doom refresh</code></pre></div>
<h3 id="常用模块说明">常用模块说明</h3>

<p>Doom Emacs 将模块分成了不同的分组。每个模块都有文档，文档在 <code>~/.emacs.d/modules/&lt;分组名&gt;/&lt;模块名&gt;/</code> 下面，建议阅读。</p>

<h4 id="input">input</h4>

<p>输入法相关，目前包含中文和英文输入法。使用 <kbd>C-&lt;/kbd&gt; 可以切换输入法。</p>

<h4 id="completion">completion</h4>

<p>自动补全相关。包括：</p>

<ul>
<li><p>company 自动补全工具。建议一定要打开。如果使用的是 Emacs 26 以上的版本，建议打开 <code>+childframe</code> 开关：</p>

<pre><code>(company +childframe)
</code></pre>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190527161010.png" alt="请在这里输入图片描述" /></p></li>

<li><p>helm ivy ido  这三个都是搜索工具，只需要开启一个即可。这三个工具功能是类似的，不同人有不同的喜好。本文作者使用的是 ivy，并且开启了 <code>+icons</code>（显示文件图标）和  <code>+fuzzy</code>（支持模糊搜索） 这两个开关。ivy 和 helm 都支持 <code>+fuzzy</code>，建议打开，这样就可以模糊搜索啦。</p>

<p>开启之后，所有的文件搜索、命令搜索、代码搜索等功能，均会由搜索工具接管。例如执行 <kbd>SPC / p</kbd> 搜索项目时，在最下方的 mini buffer 出现的搜索，就是搜索工具控制的。如果使用的是 ivy 的话，可以使用 <kbd>C-n</kbd> <kbd>C-p</kbd>  上下翻页，使用 <kbd>Enter</kbd> 选择。</p>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190527161745.png" alt="请在这里输入图片描述" /></p>

<p>这些搜索工具需要调用一些后端的搜索命令。以 ivy 为例，你需要在操作系统中安装 ripgrep 和 the_silver_searcher 这两个内容搜索工具来让 ivy 调用来搜索文件并展示。</p></li>
</ul>

<h4 id="ui">ui</h4>

<p>这里都是一些显示相关的模块，比较多，不再一一说明，保持默认即可，列出一些可能需要修改的：</p>

<ul>
<li>doom-quit 在退出 Emacs 的时候弹出随机的提示语。如果嫌烦可以关掉。</li>
<li>fill-column 显示提示符，避免一行变得太长（默认在第 80 列显示）</li>
<li>ident-guides 显示缩进提示</li>

<li><p>pretty-code 将一些符号显示得更“漂亮”，例如把 <code>for i in array</code> 显示成 <code>∀ i ∈ array</code>。装逼用，不改变实际文件内容。</p>

<p>这是一个 pretty 之后的效果图</p>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190529180819.png" alt="请在这里输入图片描述" /></p></li>

<li><p>treemacs 显示项目的文件树，使用  <kbd>SPC o p</kbd> 触发。</p>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190527164957.png" alt="请在这里输入图片描述" /></p></li>
</ul>

<h4 id="editor">editor</h4>

<p>比较多，列出一些比较重要的</p>

<ul>
<li>evil 打开之后，Emacs 会使用 vim 的编辑模式</li>
<li>file-templates 打开新文件时的模板。</li>
<li>fold 代码折叠</li>
<li>format 代码自动格式整理</li>
<li>multiple-cursors 多光标编辑，可以按照规则生成多个光标，输入任何命令在所有光标处生效</li>

<li><p>snippets 快速输入。定义了大量的模板来帮助快速输入一些常见的格式。例如在 python 代码下面 输入 <code>ifmain</code> 然后再敲 <kbd>TAB</kbd> 则立刻输出</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span>
    <span class="k">pass</span></code></pre></div>
<p>并且将光标放在 <code>pass</code> 的位置。</p>

<p>所有的模板可以在 <a href="https://github.com/hlissner/emacs-snippets">https://github.com/hlissner/emacs-snippets</a> 找到，也支持自定义自己的 snippets，使用 <kbd>SPC s</kbd> 可以管理 snippet。</p>

<h4 id="emacs">emacs</h4>

<p>emacs 自带的一些功能</p>

<ul>
<li>dired 文件管理工具，可以使用 <kbd>SPC o -</kbd>  打开。</li>
</ul>

<p>该工具内容极为强大，能写一本书，建议大家自行查阅它的手册，或者打开 Emacs 的菜单（<kbd>M-x menu-bar-mode</kbd>），使用菜单来熟悉它的各项功能。本文作者最喜欢它可以使用正则表达式规则来批量重命名文件的功能。</p>

<p>最基本的使用方法：使用 <kbd>j</kbd> <kbd>k</kbd> 移动文件，<kbd>Enter</kbd> 进入子目录或者打开文件，<kbd>-</kbd> 或者 <kbd>^</kbd> 跳转上一层目录。</p>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190527164610.png" alt="请在这里输入图片描述" /></p>

<h4 id="term">term</h4>

<p>在 Emacs 中打开 terminal。有三个，作用不同：</p>

<ul>
<li>eshell 使用 emacs lisp 编写的 shell，使用起来和 bash 基本相似，但是不完全相同。在特定场合会比 bash 强大（例如可以直接在命令中内嵌 lisp 函数）。<kbd>SPC o e</kbd> 在新 buffer 中打开，<kbd>SPC o E</kbd> 在下方弹出。</li>
<li>term 和 vterm，是两个使用 bash 的 shell，使用起来和 bash 完全相同，两个功能完全相同，只开启一个即可，其中 vterm 功能更强大但是安装过程比较复杂。如果要使用 vterm 请阅读模块文档确认如何安装。<kbd>SPC o t</kbd> 全屏打开，<kbd>SPC o T</kbd> 在下方弹出。</li>
</ul>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190527165744.png" alt="请在这里输入图片描述" /></p>

<h4 id="tools">tools</h4>

<p>各种工具，特别多，不再一一列出，说一些比较重要的</p>

<ul>
<li>flycheck 语法检查。使用 <kbd>SPC t f</kbd> 开关，可以使用 <kbd>SPC c x</kbd> 列出所有错误</li>
<li>flyspell 拼写检查。使用 <kbd>SPC t s</kbd> 开关</li>
<li>magit 这是功能非常强大好用的 git 管理工具。使用 <kbd>SPC g g</kbd> 打开。打开之后可以按 <kbd>h</kbd> 获取帮助。该工具的手册有几百页，此处无法详细描述，建议大家自行查阅手册。</li>
</ul>

<p>每一行的状态会在每一行的最左边用色块的方式显示。蓝色表示有修改，绿色表示是新增，红色的小三角表示有删除。</p>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190603154642.png" alt="请在这里输入图片描述" /></p>

<p>一些常用按键：</p>

<ul>
<li>按 <kbd>h</kbd> 获取帮助</li>
<li>按 <kbd>TAB</kbd> 打开或折叠详细信息</li>
<li>按 <kbd>s</kbd> 为 stage（相当于 git add）</li>
<li>按 <kbd>c</kbd> 为 commit</li>
<li>按 <kbd>q</kbd> 退出 magit</li>
</ul>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190529175747.png" alt="请在这里输入图片描述" /></p>

<ul>
<li>make 在 Emacs 中快速编译</li>
<li>lsp 这是微软推出的 language server protocol。该工具也是一个庞大的主题，可以专门写一篇文章，此处先略过。</li>
</ul>

<h4 id="lang">lang</h4>

<p>各种编程语言的支持。根据你平时需要的，做针对性打开即可。其中值得注意的一些：</p>

<ul>
<li>cc 这个模块是一个通用模块，是一个所有类 C 语言的通用模块。可以用于 C/C++/Obj-c 等。</li>
<li>org 这是 Emacs 自带的一个非常强大和庞大的语言。orgmode 的手册有三百多页，功能极多。</li>
</ul>

<p>orgmode 的众多功能之冰山一角：在 orgmode 里面写程序</p>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190527184257.png" alt="请在这里输入图片描述" /></p>

<p>orgmode 拥有大量的功能，写程序只是它的非常小的一部分。强烈建议大家认真学习它。<a href="https://github.com/marboo/orgmode-cn">https://github.com/marboo/orgmode-cn</a> 这里有 orgmode 的中文教程。下载这个教程里面的 <code>org.org</code> 文件并且在 Emacs 中打开它来学习（可以跳过安装和激活的部分，因为 Doom Emacs 已经帮你自动安装和激活好啦）</p>

<ul>
<li>rest 这是 restful API 的客户端。结合 org 使用效果会非常好，做网络调试很方便。</li>
</ul>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190527190146.png" alt="请在这里输入图片描述" /></p>

<ul>
<li>web 编辑 html/css/javascript 等 web 相关的语言。</li>
</ul>

<h4 id="email">email</h4>

<p>邮件客户端。此处略</p>

<h4 id="app">app</h4>

<p>一些应用。此处略</p>

<h4 id="config">config</h4>

<ul>
<li>default 这个模块做了一些默认配置，例如各种按键配置等。</li>
</ul>

<h3 id="其他部分-emacs-自带的功能">其他部分 Emacs 自带的功能</h3>

<p>Emacs 的功能实在是太多太多了，介绍不完，这里介绍几个比较好玩一点的</p>

<h4 id="游戏">游戏</h4>

<p>Emacs 内置多款游戏。可以在菜单的 Tools -&gt; Games 中找到，也可以直接 <kbd>M-x</kbd> 调用游戏名称。</p>

<p>例如，<kbd>M-x tetris</kbd> 就可以玩俄罗斯方块啦</p>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190531215429.png" alt="请在这里输入图片描述" /></p>

<h4 id="ediff">ediff</h4>

<p><kbd>M-x ediff</kbd> 可以进入 ediff 工具来对比两个文件。还可以使用 ediff3 来对比三个文件，或者 ediff-files 来对比任意多个文件。</p>

<p>打开 ediff 之后，Emacs 会拆分三个窗口，左边是文件 A，右边是文件 B，下面是 ediff 管理窗口。</p>

<p>当光标焦点在文件 A 或者文件 B 时，可以正常编辑文件。</p>

<p>当光标焦点在管理窗口的时候，可以使用 ediff 的命令。按 <kbd>?</kbd> 可以获取命令列表。最常用的是：</p>

<ul>
<li><kbd>n</kbd> <kbd>p</kbd> 跳转到下一个或上一个 diff</li>
<li><kbd>a</kbd> <kbd>b</kbd> 将文件 A 的当前 diff 拷贝覆盖到文件 B，或者将文件 B 的当前 diff 拷贝覆盖到文件 A</li>
<li><kbd>q</kbd> 退出 ediff 模式</li>
</ul>

<h4 id="calc">calc</h4>

<p>Emacs 自带一个极其强大的计算器。并且这个计算器可以和 orgmode 配合使用，甚至还可以用于编辑表格的时候用作单元格计算的公式。</p>

<p>这个计算器功能简直无所不包。从单位换算，代数运算，微积分，等等等等，什么都能做。</p>

<ul>
<li><a href="https://github.com/ahyatt/emacs-calc-tutorials">https://github.com/ahyatt/emacs-calc-tutorials</a> 这里有个 calc 的教程（英文）</li>
<li><a href="https://github.com/lujun9972/emacs-document/tree/master/calc">https://github.com/lujun9972/emacs-document/tree/master/calc</a> 这里有几个简短的中文 calc 教程</li>
</ul>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190531222416.png" alt="请在这里输入图片描述" /></p>

<h2 id="自定义-doom-emacs">自定义 Doom Emacs</h2>

<p>自定义 Doom Emacs 已经远远超出了本文的范围，本文只给一个简单的例子，供大家参考，顺便演示一下 Doom Emacs 的一些常见操作，建议大家照着操作一遍，来熟悉 Doom Emacs 的用法。更多的配置请查看 Doom Emacs 的帮助文档。</p>

<p>我们的目标是给 Doom Emacs 增加一个新的插件，<a href="https://github.com/xuchunyang/youdao-dictionary.el">https://github.com/xuchunyang/youdao-dictionary.el</a> ，让 Doom Emacs 可以通过按 <kbd>SPC h l</kbd> 来通过有道词典查询当前光标下的单词（该功能需要 Emacs 26 以上版本）：</p>

<p><img src="https://sawiki2.nie.netease.com/media/image/fisherduan/20190529163826.png" alt="请在这里输入图片描述" /></p>

<ul>
<li>首先按 <kbd>SPC o -</kbd> 或者 <kbd>SPC f d</kbd> 打开 dired 并且移动到 <code>~</code> 目录。</li>
<li>按 <kbd>/</kbd> 搜索，输入 <code>.doom.d</code>，然后按 <kbd>Enter</kbd>（你也可以不搜索而是通过移动光标的方式） 定位到 <code>~/.doom.d/</code> 目录</li>
<li>按 <kbd>Enter</kbd> 进入该目录</li>
<li>按 <kbd>+</kbd>，然后输入 <code>modules/mytools/youdao</code> 并按 <kbd>Enter</kbd>，这样就创建了一个目录。如果看不到这个新建的目录，可以按 <kbd>SPC b R</kbd> 刷新一下。</li>
<li>进入我们创建的 <code>modules/mytools/youdao</code> 目录。按 <kbd>SPC .</kbd> 来打开文件列表，输入 <code>packages.el</code> 并回车，创建这个文件并编辑。</li>
<li>在打开的文件的最后面，追加这样的一行，然后按 <kbd>:w</kbd> 或者 <kbd>SPC b s</kbd> 保存文件</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">package!</span> <span class="nv">youdao-dictionary</span><span class="p">)</span></code></pre></div></li>

<li><p>再次按 <kbd>SPC .</kbd> 来打开文件列表，这次我们输入 <code>config.el</code>并回车，创建这个文件并编辑。</p></li>

<li><p>在打开的文件的最后面，追加以下内容，来配置这个模块的行为：</p>
<div class="highlight"><pre class="chroma"><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">def-package!</span> <span class="nv">youdao-dictionary</span>
  <span class="ss">:config</span>
  <span class="p">(</span><span class="nv">map!</span>
   <span class="ss">:leader</span>
   <span class="ss">:prefix</span> <span class="p">(</span><span class="s">&#34;h&#34;</span> <span class="o">.</span> <span class="s">&#34;help&#34;</span><span class="p">)</span>
   <span class="ss">:desc</span> <span class="s">&#34;Lookup Dictionary&#34;</span>    <span class="ss">:n</span> <span class="s">&#34;l&#34;</span>  <span class="nf">#&#39;</span><span class="nv">youdao-dictionary-search-at-point-tooltip</span><span class="p">))</span></code></pre></div>
<ul>
<li><p>按 <kbd>SPC f P</kbd> 然后输入 <code>ini</code> 和 <kbd>Enter</kbd> 打开 <code>~/.doom.d/init.el</code> 文件。在模块列表最下面增加我们刚创建的模块：</p>

<pre><code>:mytools
youdao
</code></pre></li>

<li><p>按 <kbd>SPC o T</kbd> 打开弹出的 terminal（假定你启用了 term 或者 vterm 模块，如果你没有启用这些模块，你需要打开 terminal），然后执行 <code>~/.emacs.d/bin/doom refresh</code></p></li>

<li><p>按 <kbd>SPC h r r</kbd> 重新加载配置</p></li>
</ul>

<p>这样，我们的插件就配置成功了。</p>

<h2 id="进一步学习-emacs">进一步学习 Emacs</h2>

<ul>
<li>Emacs China 论坛 <a href="https://emacs-china.org">https://emacs-china.org</a></li>
<li>Emacs China Telegram 聊天室 <a href="https://t.me/emacszh">https://t.me/emacszh</a></li>
<li>Doom Emacs 官方文档 <a href="https://github.com/hlissner/doom-emacs/wiki">https://github.com/hlissner/doom-emacs/wiki</a></li>
<li>Emacs 的一些中文教程 <a href="https://github.com/lujun9972/emacs-document">https://github.com/lujun9972/emacs-document</a></li>
</ul></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Emacs 在 .dir-locals.el 中执行 elisp 语句</title>
			<link>https://blog.steamedfish.org/posts/run-elisp-in-dir-locals-el-file/</link>
			<pubDate>Fri, 03 May 2019 22:53:09 +0800</pubDate>
			
			<guid>https://blog.steamedfish.org/posts/run-elisp-in-dir-locals-el-file/</guid>
			<description>在 .dir-locals.el 中可以控制目录级别的变量。这个文件不是一个 elisp 代码文件， 而是只能存放一个 Association List （联合列表，alist）的列表。 这个联合列表里面的每个 cons cell 的 car</description>
			<content type="html"><![CDATA[<p>在 <code>.dir-locals.el</code> 中可以控制目录级别的变量。这个文件不是一个 elisp 代码文件，
而是只能存放一个 Association List （联合列表，alist）的列表。</p>

<p>这个联合列表里面的每个 cons cell 的 car 是希望生效的模式，cdr 则又是一个 alist，
用于给变量赋值。</p>
<div class="highlight"><pre class="chroma"><code class="language-elisp" data-lang="elisp"><span class="p">(</span> <span class="c1">;; 一个大列表，里面是很多 alist</span>
 <span class="p">(</span><span class="nv">c-mode</span> <span class="o">.</span> <span class="p">(</span>  <span class="c1">;; 这个 alist 控制 c-mode 模式下的行为，其中 cdr 又是一个 alist</span>
            <span class="p">(</span><span class="nv">c-file-style</span> <span class="o">.</span> <span class="s">&#34;BSD&#34;</span><span class="p">)</span>
            <span class="p">(</span><span class="nv">subdirs</span> <span class="o">.</span> <span class="no">nil</span><span class="p">)</span>
           <span class="p">)</span>
 <span class="p">)</span>
 <span class="p">(</span><span class="no">nil</span> <span class="o">.</span> <span class="p">(</span>     <span class="c1">;; 这个 alist 对所有 mode 生效</span>
         <span class="p">(</span><span class="nv">indent-tabs-mode</span> <span class="o">.</span> <span class="no">t</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">tab-witdh</span> <span class="o">.</span> <span class="mi">4</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">fill-column</span> <span class="o">.</span> <span class="mi">80</span><span class="p">)</span>
        <span class="p">)</span>
 <span class="p">)</span>
<span class="p">)</span></code></pre></div>
<p>那么问题来了，有时候我们希望能够不仅仅是赋值，而是执行 elisp 语句。这个时候我们
不需要赋值，需要的是语句的副作用。我们可以将其赋值给随便一个不需要的变量上，例如
叫 <code>eval</code> 。然后我们就可以这样写：</p>
<div class="highlight"><pre class="chroma"><code class="language-elisp" data-lang="elisp"><span class="p">((</span><span class="nv">c-mode</span> <span class="o">.</span> <span class="p">((</span><span class="nv">c-file-style</span> <span class="o">.</span> <span class="s">&#34;BSD&#34;</span><span class="p">)</span>
            <span class="p">(</span><span class="nv">subdirs</span> <span class="o">.</span> <span class="no">nil</span><span class="p">)))</span>
 <span class="p">(</span><span class="no">nil</span> <span class="o">.</span> <span class="p">((</span><span class="nv">indent-tabs-mode</span> <span class="o">.</span> <span class="no">t</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">tab-witdh</span> <span class="o">.</span> <span class="mi">4</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">fill-column</span> <span class="o">.</span> <span class="mi">80</span><span class="p">)</span>
         <span class="p">(</span><span class="nf">eval</span> <span class="o">.</span> <span class="p">(</span><span class="nb">progn</span>
                   <span class="p">(</span><span class="nv">flycheck-mode</span> <span class="mi">1</span><span class="p">)</span>
                   <span class="p">(</span><span class="nv">xxxxxx</span><span class="p">)</span>
                   <span class="p">(</span><span class="nv">xxxxx</span><span class="p">))))))</span></code></pre></div>
<p>不过这样会导致 Emacs 在加载这个文件的时候，提示你加载了一个不安全的文件，并且让
你选择究竟是不加载，还是只允许一次，还是永久加载。如果选择永久加载，emacs 会记录
在 <code>custom.el</code> 中。</p>
]]></content>
		</item>
		
	</channel>
</rss>
